@startuml





/' Objects '/

namespace vino {
	class ArgsError {
		+ArgsError(std::string errstr)
		+what() : char* {query}
		-what_str : std::string
	}

	class Button {
		+Button(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window, glm::vec4 box_color, glm::vec4 title_color, std::string title, Font& font)
		-_font : Font
		-_title_color : glm::vec4
		+render() : void
	}

	class Font {
		+Font(FreeTypeFace& face)
		-_face : FreeTypeFace&
		+render_str(const std::string& str, unsigned int vbo, unsigned int x, unsigned int y, float scale) : void
	}

	class FontsCollection {
		+operator[](const std::string& font_name) : Font
		+add_font(const std::string& font_path, unsigned int size) : bool
		+add_font_with_ascii(const std::string& font_path, unsigned int size) : bool
	}

	class ForegroundFigure {
		+ForegroundFigure(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window, glm::vec4 color)
	}

	class FreeTypeFace {
		-FreeTypeFace(FT_Library& ft_lib, std::string font_path, unsigned int pxl_size)
		+FreeTypeFace(FreeTypeFace&& other)
		+~FreeTypeFace()
		+get_char(const char& ch) : Character&
		-load_ascii() : void
		-load_symbol(unsigned char ch, bool in_cycle) : void
		-set_pixel_size(unsigned int pixel_width, unsigned int pixel_height) : void
	}

	class FreeTypeLib {
		+FreeTypeLib()
		+~FreeTypeLib()
	}

	class FullscreenTexture {
		+FullscreenTexture(Window& window, glm::vec4 color)
	}

	class IBox {
		#IBox(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window)
		#_win : Window&
		+is_clicked() : bool {query}
		+is_cursor_in() : bool {query}
		#_ll_pos : glm::ivec2
		#_height : unsigned int
		#_width : unsigned int
	}

	class IDynamicBox {
		#IDynamicBox(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window, glm::vec4 color)
		-k_size_of_corners : const std::size_t
		+move_no_clip(glm::ivec2 direction) : glm::ivec2
		+move_with_clip(glm::ivec2 direction) : glm::uvec2
		+resize_no_clip(glm::uvec2 new_dimension) : glm::uvec2
		+resize_with_clip(glm::uvec2 new_dimension) : glm::uvec2
		-_corners : std::array<std::array<int, 3>, 4>
		-recalculate_corners() : void
		+render() : void
	}

	abstract class IMovable {
		+{abstract} move_no_clip(glm::ivec2 direction) : glm::ivec2
		+{abstract} move_with_clip(glm::ivec2 direction) : glm::uvec2
	}

	abstract class IResizable {
		+{abstract} resize_no_clip(glm::uvec2 new_dimension) : glm::uvec2
		+{abstract} resize_with_clip(glm::uvec2 new_dimension) : glm::uvec2
	}

	class IStaticBox {
		#IStaticBox(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window, glm::vec4 color)
		+render() : void
	}

	abstract class ITextureColorBox {
		#ITextureColorBox(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window, glm::vec4 color)
		+~ITextureColorBox()
		#_box_shader : Shader
		#_color : glm::vec4
		+{abstract} render() : void
	}

	class LowBox {
		+LowBox(glm::ivec2 low_left_pos, unsigned int width, unsigned int height, Window& parent_window, glm::vec4 color)
		+render_text(std::string text, Font& font, glm::vec4 color) : void
	}

	class NonResizableWindow {
		+NonResizableWindow(uint32_t width, uint32_t height, const std::string& title)
		+~NonResizableWindow()
	}

	class NullPtrExc {
		+what() : char* {query}
	}

	class ParsingError {
		+ParsingError(const std::string& errstr)
		+ParsingError()
		+what() : char* {query}
		-what_str : std::string
	}

	class ScreenTexture {
		+ScreenTexture()
		+~ScreenTexture()
		+render(Shader& shader, unsigned int texture, glm::vec4 scrColor) : void
	}

	class SemanticError {
		+SemanticError(const std::string& errstr)
		+SemanticError()
		+what() : char* {query}
		-what_str : std::string
	}

	class Shader {
		+Shader(const char* vertexPath, const char* fragmentPath)
		+~Shader()
		+get_id() : unsigned int
		+setBool(const std::string& name, bool value) : void {query}
		+setFloat(const std::string& name, float value) : void {query}
		+setInt(const std::string& name, int value) : void {query}
		+setMat4FloatV(const std::string& name, const glm::mat4& mat) : void {query}
		+setVec3Float(const std::string& name, float, float, float) : void {query}
		+use() : void {query}
	}

	class TextRenderer {
		+TextRenderer()
		+~TextRenderer()
		-_text_shader : Shader
		+render_str(const std::string& str, Font& font, glm::vec3 color, glm::ivec2 ll_pos, const Window& window) : void
	}

	class TokenizeError {
		+TokenizeError(std::string errstr)
		+TokenizeError()
		+what() : char* {query}
		-what_str : std::string
	}

	class Window {
		#Window(uint32_t width, uint32_t height)
		+~Window()
		#ptrWindow : GLFWwindow*
		+is_clicked() : bool {query}
		+is_pressed(int glfw_key) : bool {query}
		+should_close() : bool {query}
		+get_attribute(int glfw_attribute) : int
		+get_cursor_pos() : std::pair<int , int> {query}
		+get_height() : uint32_t {query}
		+get_width() : uint32_t {query}
		+close() : void
		+make_current() : void
		+swap_buffers() : void
	}

	class WindowError {
		+WindowError(std::string errstr)
		+what() : char* {query}
		-what_str : std::string
	}

	class Character {
		+bearing : glm::ivec2
		+size : glm::ivec2
		+advance : unsigned int
		+texture_id : unsigned int
	}

	class ImgData {
		+ImgData(const std::string& path_to_png)
		+~ImgData()
	}
}





/' Inheritance relationships '/

vino.IBox <|-- vino.ITextureColorBox


vino.IDynamicBox <|-- vino.ForegroundFigure


vino.IMovable <|-- vino.IDynamicBox


vino.IResizable <|-- vino.IDynamicBox


vino.IStaticBox <|-- vino.Button


vino.IStaticBox <|-- vino.FullscreenTexture


vino.IStaticBox <|-- vino.LowBox


vino.ITextureColorBox <|-- vino.IDynamicBox


vino.ITextureColorBox <|-- vino.IStaticBox


vino.Window <|-- vino.NonResizableWindow





/' Aggregation relationships '/

vino.Button *-- vino.Font


vino.Font *-- vino.FreeTypeFace


vino.IBox *-- vino.Window


vino.ITextureColorBox *-- vino.Shader


vino.TextRenderer *-- vino.Shader






/' Dependency relationships '/

vino.Font <.. vino.Button


vino.Font <.. vino.LowBox


vino.Font <.. vino.TextRenderer


vino.FreeTypeFace <.. vino.Font


vino.FreeTypeFace <.. vino.FreeTypeFace


vino.Shader <.. vino.ScreenTexture


vino.Window <.. vino.Button


vino.Window <.. vino.ForegroundFigure


vino.Window <.. vino.FullscreenTexture


vino.Window <.. vino.IBox


vino.Window <.. vino.IDynamicBox


vino.Window <.. vino.IStaticBox


vino.Window <.. vino.ITextureColorBox


vino.Window <.. vino.LowBox


vino.Window <.. vino.TextRenderer






/' Nested objects '/



@enduml
